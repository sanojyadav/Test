<!--
/**
 * Webkul Software.
 *
 * @category  Webkul
 * @package   Webkul_Pos
 * @author    Webkul
 * @copyright (c) Webkul Software Private Limited (https://webkul.com)
 * @license   https://store.webkul.com/license.html
 */
-->
<div id="messages">
    <div class="messages">
        <div class="message message-notice notice">
            <div data-ui-id="messages-message-notice">
                <?= /*@noEscape*/
                __("Applicable only when 
                \"Product Assignment basis\" is selected as \"Category based."); ?>
                </div>
        </div>
    </div>
</div>
<?php $_divId = "tree-div_" . time() ?>
<div id="<?= $escaper->escapeHtml($_divId) ?>" class="tree"></div>
<input type="hidden" name="pos_outlet[category_ids]" id="category_id" data-form-part="pos_outlet_form" value=""/>
<script id="ie-deferred-loader" defer="defer" src="//:"></script>
<style type="text/css">
    .admin__scope-old input[type="radio"], .admin__scope-old input[type="checkbox"] {
        margin: 0 5px 3px 3px !important;
    }
</style>
<script type="text/javascript">
    require([
        "jquery"
    ], function(jQuery)  {
        var fromDb = "<?= $escaper->escapeHtml($block->getCatIds()); ?>";
        var categories = [];
        if (fromDb)  {
            categories = fromDb.split(",");
        }
        jQuery("#category_id").val(categories.join(","));
        jQuery("body").on("change", ".categories", function () {
            if (jQuery(this).is(":checked"))  {
                categories.push(jQuery(this).val());
            } else  {
                categories.splice(categories.indexOf(jQuery(this).val()), 1);
            }
            jQuery("#category_id").val(categories.join(","));
        });

        var tree;

        Ext.lib.Event.getTarget = function(e) {
            var ee = e.browserEvent || e;
            return ee.target ? Event.element(ee) : null;
        };

        Ext.tree.TreePanel.Enhanced = function(el, config)  {
            Ext.tree.TreePanel.Enhanced.superclass.constructor.call(this, el, config);
        };

        Ext.extend(Ext.tree.TreePanel.Enhanced, Ext.tree.TreePanel, {
            loadTree : function(config, firstLoad)  {
                var parameters = config["parameters"];
                var data = config["data"];
                var root = new Ext.tree.TreeNode(parameters);
                this.nodeHash = {};
                this.setRootNode(root);
                if (firstLoad) {
                    this.addListener("click", this.categoryClick.createDelegate(this));
                }
                this.loader.buildCategoryTree(root, data);
                this.el.dom.innerHTML = "";
                this.render();
            },

            categoryClick : function(node, e)   {
                node.getUI().check(!node.getUI().checked());
            }
        });

        jQuery(function()   {
            var categoryLoader = new Ext.tree.TreeLoader({
                dataUrl: "<?= $escaper->escapeUrl($block->getLoadTreeUrl()) ?>"
            });

            categoryLoader.createNode = function(config) {
                config.uiProvider = Ext.tree.CheckboxNodeUI;
                var node;
                var _node = Object.clone(config);
                if (config.children && !config.children.length) {
                    delete(config.children);
                    node = new Ext.tree.AsyncTreeNode(config);
                } else {
                    node = new Ext.tree.TreeNode(config);
                }
                return node;
            };

            categoryLoader.buildCategoryTree = function(parent, config)     {
                if (!config) return null;
                if (parent && config && config.length){
                    for (var i = 0; i < config.length; i++) {
                        config[i].uiProvider = Ext.tree.CheckboxNodeUI;
                        var node;
                        var _node = Object.clone(config[i]);
                        if (_node.children && !_node.children.length) {
                            delete(_node.children);
                            node = new Ext.tree.AsyncTreeNode(_node);
                        } else {
                            node = new Ext.tree.TreeNode(config[i]);
                        }
                        parent.appendChild(node);
                        node.loader = node.getOwnerTree().loader;
                        if (_node.children) {
                            this.buildCategoryTree(node, _node.children);
                        }
                    }
                }
            };

            categoryLoader.buildHash = function(node)   {
                var hash = {};
                hash = this.toArray(node.attributes);
                if (node.childNodes.length>0 || (node.loaded==false && node.loading==false)) {
                    hash["children"] = new Array;
                    for (var i = 0, len = node.childNodes.length; i < len; i++) {
                        if (!hash["children"]) {
                            hash["children"] = new Array;
                        }
                        hash["children"].push(this.buildHash(node.childNodes[i]));
                    }
                }
                return hash;
            };

            categoryLoader.toArray = function(attributes) {
                var data = {};
                for (var key in attributes) {
                    var value = attributes[key];
                    data[key] = value;
                }
                return data;
            };

            categoryLoader.on("beforeload", function(treeLoader, node) {
                treeLoader.baseParams.id = node.attributes.id;
            });

            categoryLoader.on("load", function(treeLoader, node, config) {
                varienWindowOnload();
            });

            tree = new Ext.tree.TreePanel.Enhanced("<?= $escaper->escapeHtml($_divId) ?>", {
                animate:          false,
                loader:           categoryLoader,
                enableDD:         false,
                containerScroll:  true,
                selModel:         new Ext.tree.CheckNodeMultiSelectionModel(),
                rootVisible:      "<?= $escaper->escapeHtml($block->getIsRootCatToShow()) ?>",
                useAjax:          <?= $escaper->escapeHtml($block->getUseAjax()) ?>,
                currentNodeId:    <?= (int) $block->getCategoryId() ?>,
                addNodeTo:        false,
                rootUIProvider:   Ext.tree.CheckboxNodeUI
            });

            // set the root node
            var parameters = {
                text:        "<?= $escaper->escapeHtml(($block->getRoot()->getName())) ?>",
                draggable:   false,
                checked:     "<?= $escaper->escapeHtml($block->getRoot()->getChecked()) ?>",
                uiProvider:  Ext.tree.CheckboxNodeUI,
                allowDrop:   <?php if ($block->getRoot()->getIsVisible()): ?>true<?php else: ?>false<?php endif; ?>,
                id:          <?= $escaper->escapeHtml((int) $block->getRoot()->getId()) ?>,
                expanded:    <?= $escaper->escapeHtml((int) $block->getIsWasExpanded()) ?>,
                category_id: <?= $escaper->escapeHtml((int) $block->getCategoryId()) ?>
            };

            tree.loadTree({parameters:parameters, data:<?= /*@noEscape*/ $block->getTreeJson() ?>},true);

        });

    });
</script>